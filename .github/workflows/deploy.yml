name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - master
env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: rental-rewards
  REPO_NAME: rental-rewards # Artifact Registry repo name
  IMAGE: rental-rewards

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' # Needed for Workload Identity Federation
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # üîë Authenticate using Workload Identity Federation
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          project_id: ${{ env.PROJECT_ID }}


      # Install Cloud SQL Auth Proxy to run migrations
      - name: Install Cloud SQL Auth Proxy
        run: |
          curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.18.1/cloud-sql-proxy.linux.amd64
          chmod +x cloud-sql-proxy
          sudo mv cloud-sql-proxy /usr/local/bin/

      # üîπ Install migrate binary
      - name: Install migrate CLI
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.19.0/migrate.linux-amd64.tar.gz \
            | tar xvz
          mkdir -p $HOME/bin
          mv migrate $HOME/bin/
          echo "$HOME/bin" >> $GITHUB_PATH

      # Run migrations
      - name: Run migrations
        env:
          PGUSER: ${{ secrets.DB_USER }}
          PGPASSWORD: ${{ secrets.DB_PASS }}
          PGHOST: localhost
          PGPORT: 5432
          PGDATABASE: ${{ vars.DB_NAME }}
        run: |
          cloud-sql-proxy ${{secrets.DB_INST_CONN_NAME}} &
          sleep 5
          echo "PGUSER=$PGUSER"
          echo "PGHOST=$PGHOST"
          echo "PGPORT=$PGPORT"
          echo "PGDATABASE=$PGDATABASE" 
          migrate -path ./migrations -database "postgres:///?sslmode=disable" up

      # üê≥ Build Docker image
      - name: Build Docker image
        run: |
          IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE }}:${{ github.sha }}
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI .

      # üîê Configure Docker for Artifact Registry
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      # ‚¨ÜÔ∏è Push Docker image
      - name: Push Docker image
        run: docker push $IMAGE_URI

      # Deploy
      - name: Deploy to Cloud Run
#        env:
#          RR_DB_DSN: 'postgres://${{ secrets.DB_USER }}:${{ secrets.DB_PASS }}@/${{ env.DB_NAME }}?host=${{secrets.DB_INST_CONN_NAME}}&sslmode=disable'
#          INSTANCE_CONNECTION_NAME: ${{secrets.DB_INST_CONN_NAME}}
        run: |-
          echo "$RR_DB_DSN"
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image $IMAGE_URI \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --add-cloudsql-instances="${{ secrets.DB_INST_CONN_NAME }}" \
            --set-secrets RR_DB_DSN=${{ vars.RR_DB_DSN_SECRET_PATH }} \
            --set-env-vars ENVIRONMENT=production
